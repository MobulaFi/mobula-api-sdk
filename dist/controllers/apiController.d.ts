/**
 * MobulaLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { AllResponse } from '../models/allResponse';
import { Asset } from '../models/asset';
import { MarketDataResponse } from '../models/marketDataResponse';
import { MarketHistoryResponse } from '../models/marketHistoryResponse';
import { MarketPairResponse } from '../models/marketPairResponse';
import { MarketPairsResponse } from '../models/marketPairsResponse';
import { MultiDataResponse } from '../models/multiDataResponse';
import { OrderEnum } from '../models/orderEnum';
import { QuoteResponse1 } from '../models/quoteResponse1';
import { SearchResponse } from '../models/searchResponse';
import { TradeHistoryResponse } from '../models/tradeHistoryResponse';
import { TypeEnum } from '../models/typeEnum';
import { WalletHistoryResponse } from '../models/walletHistoryResponse';
import { WalletNftsResponse1 } from '../models/walletNftsResponse1';
import { WalletPortfolioResponse1 } from '../models/walletPortfolioResponse1';
import { WalletTransactionsResponse } from '../models/walletTransactionsResponse';
import { BaseController } from './baseController';
export declare class ApiController extends BaseController {
    /**
     * @param name Name or symbol (or starting name/symbol) of the asset
     * @return Response from the API call
     */
    searchCryptoByName(name?: string, requestOptions?: RequestOptions): Promise<ApiResponse<SearchResponse>>;
    /**
     * @param wallet      Wallet address or ENS or Mobula username
     * @param force       Will force a new on-chain data fetch
     * @param blockchains Blockchains to fetch NFTs from (by default, all) - comma separated, chain ID or
     *                               chain name
     * @return Response from the API call
     */
    fetchWalletNFTs(wallet?: string, force?: boolean, blockchains?: string, requestOptions?: RequestOptions): Promise<ApiResponse<WalletNftsResponse1>>;
    /**
     * @param fields Extra fields needed
     * @return Response from the API call
     */
    fetchAllCryptoDetails(fields?: string, requestOptions?: RequestOptions): Promise<ApiResponse<AllResponse>>;
    /**
     * @param asset      The asset you want to target - asset name only works for assets listed on Mobula.
     * @param blockchain Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     * @param symbol     Symbol of the asset - only mandatory if no asset name/contract is provided
     * @return Response from the API call
     */
    fetchAssetMarketData(asset?: string, blockchain?: string, symbol?: string, requestOptions?: RequestOptions): Promise<ApiResponse<MarketDataResponse>>;
    /**
     * @param address    The address of the smart-contract of the pair (or pool, or vault).
     * @param blockchain Blockchain of the pair (only mandatory for Balancer V2 pairs).
     * @param asset      The name/address of the asset you want in return
     * @return Response from the API call
     */
    fetchPairMarketData(address: string, blockchain?: string, asset?: unknown, requestOptions?: RequestOptions): Promise<ApiResponse<MarketPairResponse>>;
    /**
     * @param asset      The asset you want to target - asset name only works for assets listed on Mobula.
     * @param blockchain Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     * @param offset     The offset of the results
     * @return Response from the API call
     */
    fetchPairsMarketData(asset: string, blockchain?: string, offset?: number, requestOptions?: RequestOptions): Promise<ApiResponse<MarketPairsResponse>>;
    /**
     * @param asset      The asset you want to target - asset name only works for assets listed on Mobula.
     * @param blockchain Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     * @param from       JS Timestamp (milliseconds) of the beginning of the timeframe (if not provided,
     *                             genesis)
     * @param to         JS Timestamp (milliseconds) of the end of the timeframe (if not provided, end)
     * @return Response from the API call
     */
    fetchAssetMarketHistory(asset: string, blockchain?: string, from?: number, to?: number, requestOptions?: RequestOptions): Promise<ApiResponse<MarketHistoryResponse>>;
    /**
     * @param assets      Comma separated list of asset names or Ethereum addresses (max 500)
     * @param blockchains Comma separated list of blockchain names
     * @param symbols     Comma separated list of symbols
     * @return Response from the API call
     */
    fetchMultipleAssetMarketData(assets?: string, blockchains?: string, symbols?: string, requestOptions?: RequestOptions): Promise<ApiResponse<MultiDataResponse>>;
    /**
     * @param asset      Asset name or contract address to retrieve trade history for.
     * @param maxResults Maximum number of results to return.
     * @return Response from the API call
     */
    fetchAssetTradeHistory(asset: string, maxResults?: number, requestOptions?: RequestOptions): Promise<ApiResponse<TradeHistoryResponse>>;
    /**
     * @param asset      Name or contract address of the asset
     * @param blockchain Blockchain of the asset
     * @return Response from the API call
     */
    fetchAssetMetadata(asset: string, blockchain?: string, requestOptions?: RequestOptions): Promise<ApiResponse<Asset>>;
    /**
     * @param chain       Blockchain of the trade
     * @param fromToken   Source token for the swap
     * @param toToken     Destination token for the swap
     * @param fromAddress Address that triggers the trade
     * @param amount      Amount (x decimals) for the swap in
     * @param slippage    Slippage (%) accepted
     * @param receiver    Address that receives the trade (by default, the sender)
     * @param type        Aggregation type (fast or best)
     * @return Response from the API call
     */
    fetchSwapQuote(chain: string, fromToken: string, toToken: string, fromAddress: string, amount: bigint, slippage: number, receiver?: string, type?: TypeEnum, requestOptions?: RequestOptions): Promise<ApiResponse<QuoteResponse1>>;
    /**
     * @param wallet      The user wallet queried
     * @param from        JS Timestamp (miliseconds) of the beginning of the timeframe (if not provided,
     *                              genesis)
     * @param to          JS Timestamp (miliseconds) of the end of the timeframe (if not provided, end)
     * @param blockchains Blockchains to fetch history from (by default, all) - comma separated, chain ID or
     *                              chain name
     * @return Response from the API call
     */
    fetchWalletHistoryBalance(wallet: string, from?: number, to?: number, blockchains?: string, requestOptions?: RequestOptions): Promise<ApiResponse<WalletHistoryResponse>>;
    /**
     * Get the portfolio of holdings from any EVM-compatible wallets, at any time
     *
     * @param wallet      The user wallet queried
     * @param blockchains Blockchains to fetch holdings from (by default, all) - comma separated, chain ID or
     *                               chain name
     * @param cache       Will use cached data if available
     * @param stale       Amount of seconds after which the cache is considered stale (default 5min)
     * @return Response from the API call
     */
    fetchWalletHoldings(wallet: string, blockchains?: string, cache?: boolean, stale?: number, requestOptions?: RequestOptions): Promise<ApiResponse<WalletPortfolioResponse1>>;
    /**
     * Retrieve all transactions for a specified wallet within a given timeframe.
     *
     * @param wallet      The user wallet queried
     * @param from        Start of the timeframe for transactions (timestamp)
     * @param to          End of the timeframe for transactions (timestamp)
     * @param asset       Specific asset to filter transactions
     * @param blockchains Blockchains to fetch NFTs from (by default, all) - comma separated, chain ID or
     *                                 chain name
     * @param limit       Number of transactions to return per page
     * @param offset      Number of transactions to skip
     * @param order       Example: asc
     * @return Response from the API call
     */
    fetchWalletTransactions(wallet: string, from?: number, to?: number, asset?: string, blockchains?: string, limit?: number, offset?: number, order?: OrderEnum, requestOptions?: RequestOptions): Promise<ApiResponse<WalletTransactionsResponse>>;
}
