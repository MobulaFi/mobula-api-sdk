/**
 * MobulaLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorResponseError } from '../errors/errorResponseError';
import { AllResponse, allResponseSchema } from '../models/allResponse';
import { Asset, assetSchema } from '../models/asset';
import {
  MarketDataResponse1,
  marketDataResponse1Schema,
} from '../models/marketDataResponse1';
import {
  MarketHistoryResponse,
  marketHistoryResponseSchema,
} from '../models/marketHistoryResponse';
import { MarketMetrics, marketMetricsSchema } from '../models/marketMetrics';
import { OrderEnum, orderEnumSchema } from '../models/orderEnum';
import { QuoteResponse1, quoteResponse1Schema } from '../models/quoteResponse1';
import { SearchResponse, searchResponseSchema } from '../models/searchResponse';
import {
  TradeHistoryItem,
  tradeHistoryItemSchema,
} from '../models/tradeHistoryItem';
import { TypeEnum, typeEnumSchema } from '../models/typeEnum';
import {
  WalletHistoryResponse,
  walletHistoryResponseSchema,
} from '../models/walletHistoryResponse';
import {
  WalletNftsResponse1,
  walletNftsResponse1Schema,
} from '../models/walletNftsResponse1';
import {
  WalletPortfolioResponse,
  walletPortfolioResponseSchema,
} from '../models/walletPortfolioResponse';
import {
  WalletTransactionsResponse,
  walletTransactionsResponseSchema,
} from '../models/walletTransactionsResponse';
import {
  array,
  bigint,
  boolean,
  dict,
  number,
  optional,
  string,
} from '../schema';
import { BaseController } from './baseController';

export class ApiController extends BaseController {
  /**
   * @param name Name or symbol (or starting name/symbol) of the asset
   * @return Response from the API call
   */
  async fetchCryptoDataByName(
    name?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchResponse>> {
    const req = this.createRequest('GET', '/search');
    const mapped = req.prepareArgs({ name: [name, optional(string())] });
    req.query('name', mapped.name);
    return req.callAsJson(searchResponseSchema, requestOptions);
  }

  /**
   * @param wallet Wallet address or ENS or Mobula username
   * @param force  Will force a new on-chain data fetch
   * @return Response from the API call
   */
  async fetchWalletNFTs(
    wallet?: string,
    force?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletNftsResponse1>> {
    const req = this.createRequest('GET', '/wallet/nfts');
    const mapped = req.prepareArgs({
      wallet: [wallet, optional(string())],
      force: [force, optional(boolean())],
    });
    req.query('wallet', mapped.wallet);
    req.query('force', mapped.force);
    return req.callAsJson(walletNftsResponse1Schema, requestOptions);
  }

  /**
   * @param fields Extra fields needed
   * @return Response from the API call
   */
  async fetchAllCryptoDetails(
    fields?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AllResponse>> {
    const req = this.createRequest('GET', '/all');
    const mapped = req.prepareArgs({ fields: [fields, optional(string())] });
    req.query('fields', mapped.fields);
    return req.callAsJson(allResponseSchema, requestOptions);
  }

  /**
   * @param asset      The asset you want to target - asset name only works for assets listed on Mobula.
   * @param blockchain Blockchain of the asset - only mandatory if asset is sent as smart-contract.
   * @return Response from the API call
   */
  async fetchAssetMarketData(
    asset: string,
    blockchain?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MarketDataResponse1>> {
    const req = this.createRequest('GET', '/market/data');
    const mapped = req.prepareArgs({
      asset: [asset, string()],
      blockchain: [blockchain, optional(string())],
    });
    req.query('asset', mapped.asset);
    req.query('blockchain', mapped.blockchain);
    return req.callAsJson(marketDataResponse1Schema, requestOptions);
  }

  /**
   * @param asset      The asset you want to target - asset name only works for assets listed on Mobula.
   * @param blockchain Blockchain of the asset - only mandatory if asset is sent as smart-contract.
   * @param from       JS Timestamp (miliseconds) of the beginning of the timeframe (if not provided,
   *                             genesis)
   * @param to         JS Timestamp (miliseconds) of the end of the timeframe (if not provided, end)
   * @return Response from the API call
   */
  async fetchAssetMarketHistory(
    asset: string,
    blockchain?: string,
    from?: number,
    to?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MarketHistoryResponse>> {
    const req = this.createRequest('GET', '/market/history');
    const mapped = req.prepareArgs({
      asset: [asset, string()],
      blockchain: [blockchain, optional(string())],
      from: [from, optional(number())],
      to: [to, optional(number())],
    });
    req.query('asset', mapped.asset);
    req.query('blockchain', mapped.blockchain);
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    return req.callAsJson(marketHistoryResponseSchema, requestOptions);
  }

  /**
   * @param assets      Comma separated list of asset names or Ethereum addresses (max 50)
   * @param blockchains Comma separated list of blockchain names
   * @return Response from the API call
   */
  async fetchMultipleAssetMarketData(
    assets: string,
    blockchains?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Record<string, MarketMetrics>>> {
    const req = this.createRequest('GET', '/market/multi-data');
    const mapped = req.prepareArgs({
      assets: [assets, string()],
      blockchains: [blockchains, optional(string())],
    });
    req.query('assets', mapped.assets);
    req.query('blockchains', mapped.blockchains);
    req.throwOn(400, ErrorResponseError, 'Invalid input - too many assets or invalid blockchain name');
    return req.callAsJson(dict(marketMetricsSchema), requestOptions);
  }

  /**
   * @param asset      Asset name or contract address to retrieve trade history for.
   * @param maxResults Maximum number of results to return.
   * @return Response from the API call
   */
  async fetchAssetTradeHistory(
    asset: string,
    maxResults?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TradeHistoryItem[]>> {
    const req = this.createRequest('GET', '/market/trades');
    const mapped = req.prepareArgs({
      asset: [asset, string()],
      maxResults: [maxResults, optional(number())],
    });
    req.query('asset', mapped.asset);
    req.query('maxResults', mapped.maxResults);
    req.throwOn(400, ErrorResponseError, 'Bad request (e.g., missing asset parameter)');
    return req.callAsJson(array(tradeHistoryItemSchema), requestOptions);
  }

  /**
   * @param asset Name or contract address of the asset
   * @return Response from the API call
   */
  async fetchAssetMetadata(
    asset?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Asset[]>> {
    const req = this.createRequest('GET', '/metadata');
    const mapped = req.prepareArgs({ asset: [asset, optional(string())] });
    req.query('asset', mapped.asset);
    return req.callAsJson(array(assetSchema), requestOptions);
  }

  /**
   * @param chain       Blockchain of the trade
   * @param fromToken   Source token for the swap
   * @param toToken     Destination token for the swap
   * @param fromAddress Address that triggers the trade
   * @param amount      Amount (x decimals) for the swap in
   * @param slippage    Slippage (%) accepted
   * @param receiver    Address that receives the trade (by default, the sender)
   * @param type        Aggregation type (fast or best)
   * @return Response from the API call
   */
  async fetchSwapQuote(
    chain: string,
    fromToken: string,
    toToken: string,
    fromAddress: string,
    amount: bigint,
    slippage: number,
    receiver?: string,
    type?: TypeEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<QuoteResponse1>> {
    const req = this.createRequest('GET', '/quote');
    const mapped = req.prepareArgs({
      chain: [chain, string()],
      fromToken: [fromToken, string()],
      toToken: [toToken, string()],
      fromAddress: [fromAddress, string()],
      amount: [amount, bigint()],
      slippage: [slippage, number()],
      receiver: [receiver, optional(string())],
      type: [type, optional(typeEnumSchema)],
    });
    req.query('chain', mapped.chain);
    req.query('fromToken', mapped.fromToken);
    req.query('toToken', mapped.toToken);
    req.query('fromAddress', mapped.fromAddress);
    req.query('amount', mapped.amount);
    req.query('slippage', mapped.slippage);
    req.query('receiver', mapped.receiver);
    req.query('type', mapped.type);
    return req.callAsJson(quoteResponse1Schema, requestOptions);
  }

  /**
   * @param wallet The user wallet queried
   * @param from   JS Timestamp (miliseconds) of the beginning of the timeframe (if not provided, genesis)
   * @param to     JS Timestamp (miliseconds) of the end of the timeframe (if not provided, end)
   * @return Response from the API call
   */
  async fetchWalletHistoryBalance(
    wallet: string,
    from?: number,
    to?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletHistoryResponse>> {
    const req = this.createRequest('GET', '/wallet/history');
    const mapped = req.prepareArgs({
      wallet: [wallet, string()],
      from: [from, optional(number())],
      to: [to, optional(number())],
    });
    req.query('wallet', mapped.wallet);
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    return req.callAsJson(walletHistoryResponseSchema, requestOptions);
  }

  /**
   * @param wallet     The user wallet queried
   * @param timestamp  ISO Date string from which you want to start receiving transactions - NOW by
   *                              default
   * @param asset      The asset you want to target (empty if you want general portfolio)
   * @param blockchain The blockchain you want to target (empty if you want general transactions)
   * @param tokens     true if tokens included (true by default)
   * @param nfts       true if nfts included (false by default)
   * @param coins      true if coins included (true by default)
   * @return Response from the API call
   */
  async fetchWalletHoldings(
    wallet: string,
    timestamp?: number,
    asset?: string,
    blockchain?: string,
    tokens?: boolean,
    nfts?: boolean,
    coins?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletPortfolioResponse>> {
    const req = this.createRequest('GET', '/wallet/portfolio');
    const mapped = req.prepareArgs({
      wallet: [wallet, string()],
      timestamp: [timestamp, optional(number())],
      asset: [asset, optional(string())],
      blockchain: [blockchain, optional(string())],
      tokens: [tokens, optional(boolean())],
      nfts: [nfts, optional(boolean())],
      coins: [coins, optional(boolean())],
    });
    req.query('wallet', mapped.wallet);
    req.query('timestamp', mapped.timestamp);
    req.query('asset', mapped.asset);
    req.query('blockchain', mapped.blockchain);
    req.query('tokens', mapped.tokens);
    req.query('nfts', mapped.nfts);
    req.query('coins', mapped.coins);
    return req.callAsJson(walletPortfolioResponseSchema, requestOptions);
  }

  /**
   * @param wallet       The user wallet queried
   * @param from         ISO Date string OR Timestamp from which you want to start receiving
   *                                  transactions
   * @param to           ISO Date string OR Timestamp until which you want to receive transactions
   * @param asset        The asset you want to target, use the asset's name (empty if you want general
   *                                  transactions)
   * @param blockchain   The blockchain you want to target (empty if you want general transactions)
   * @param trades       true if trades included (true by default)
   * @param transactions true if non-trades transactions included (true by default)
   * @param limit        Number of transactions to return (100 by default)
   * @param offset       Number of pages to skip (0 by default) - limit * offset = number of transactions
   *                                  to skip
   * @param order        Order in which transactions should be sorted. Use 'asc' for ascending and 'desc'
   *                                  for descending.
   * @return Response from the API call
   */
  async fetchWalletTransactions(
    wallet: string,
    from?: number,
    to?: number,
    asset?: string,
    blockchain?: string,
    trades?: boolean,
    transactions?: boolean,
    limit?: number,
    offset?: number,
    order?: OrderEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WalletTransactionsResponse>> {
    const req = this.createRequest('GET', '/wallet/transactions');
    const mapped = req.prepareArgs({
      wallet: [wallet, string()],
      from: [from, optional(number())],
      to: [to, optional(number())],
      asset: [asset, optional(string())],
      blockchain: [blockchain, optional(string())],
      trades: [trades, optional(boolean())],
      transactions: [transactions, optional(boolean())],
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      order: [order, optional(orderEnumSchema)],
    });
    req.query('wallet', mapped.wallet);
    req.query('from', mapped.from);
    req.query('to', mapped.to);
    req.query('asset', mapped.asset);
    req.query('blockchain', mapped.blockchain);
    req.query('trades', mapped.trades);
    req.query('transactions', mapped.transactions);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.query('order', mapped.order);
    return req.callAsJson(walletTransactionsResponseSchema, requestOptions);
  }
}
